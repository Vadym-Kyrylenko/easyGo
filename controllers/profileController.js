const { Profile, User } = require('../models');

module.exports = {
  getProfile(req, res) {
    const { id } = req.params;
    Profile.findOne({ where: { id }, include: [{ model: User, attributes: ['login', 'email', 'password'], required: true }] })
      .then((element) => {
        if (!element) {
          return res.status(404).json({ massage: `User not found with id ${id}` });
        }
        return res.status(200).json(element).send();
      })
      .catch(error => res.status(404).json({ message: `Something went wrong with id ${id}, ${error}` }));
  },
  // check id if not number if has this id// create(req, res) {
  //   Profile.create(req.body)
  // .then(element => res.status(201).location(`/${element.id}/profile`).send())
  //     .catch(() => res.status(404).send('Not found'));
  // },

  updateProfile(req, res) {
    // Profile.validate({ lastName }).then(() => { });
    // const objProps = Object.keys(Profile.rawAttributes);
    // const newProps = objProps.filter((value) => {
    //   return Profile.rawAttributes[value]
    //     ._autoGenerated === undefined && !Profile.rawAttributes[value].references;
    // });
    // const requestParams = Object.keys(req.body);
    // if (requestParams.lenght !== newProps.length) {
    //   return true;
    // }
    // console.log(newProps);
    // Profile.find;
    // check id if not number if has this id
    // create(req, res) {
    //   Profile.create(req.body)
    //     .then(profile => res.status(201).location(`/${profile.id}/profile`))
    //     .catch(error => res.status(404).json({ message: `Not found ${error}` }));
    // },


    if (!req.body) {
      return res.status(400).json('No request body');
    }
    if (!(req.body.firstName && req.body.lastName && req.body.phoneNumber && req.body.city
      && req.body.country && req.body.birthday && req.body.gender && req.body.photo
      && req.body.about)) {
      return res.status(400).json({ message: 'Request body not includes all columns' });
    }
    const { id } = req.params;
    return Profile.findById(id).then((profile) => {
      if (!profile) {
        return res.status(404).json({ message: `UserProfile with id ${req.params.id} not found.` });
      }
      return profile.update(req.body)
        .then(() => res.status(200).json({ message: 'UserProfile updated successfully.' }));
    })
      .catch(error => res.status(404).json({ message: `Something went wrong with id ${id}, ${error}` }));
  },

  removeProfile(req, res) {
    const { id } = req.params; //
    Profile.findById(id)
      .then((element) => {
        if (!element) {
          return res.status(404).json({ massage: `User not found with id ${id}` });
        }
        return element.destroy()
          .then(() => res.status(400).send());
      })
      .catch(() => res.status(404).json({ massage: `User not found with id ${id}` }));
  },
};
